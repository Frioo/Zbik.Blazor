@using System.Text.Json;
@using System.Reflection

<link rel="stylesheet" href="_content/Zbik.Blazor.JsonTree/styles.css" />

<ul class="text">
    @foreach (var p in nodeProperties)
    {
        @switch (p.Value.ValueKind)
        {
            case JsonValueKind.String:
            {
                <li>
                    <span class="key">"@p.Name"</span>
                    :
                    <span class="string">
                        "@p.Value"
                    </span>
                </li>
                break;
            }

            case JsonValueKind.Number:
            {
                <li>
                    <span class="key">"@p.Name"</span>:
                    <span class="number">@p.Value</span>
                </li>
                break;
            }

            case JsonValueKind.Array:
            {
                <li>
                    <span class="key">"@p.Name"</span>: [
                    <JsonTree Node="@p.Value" />
                    ]
                </li>
                break;
            }

            case JsonValueKind.Object:
            {
                <li>
                    <span class="key">"@p.Name"</span>: {
                    <JsonTree Node="@p.Value" />
                    }
                </li>
                break;
            }

        }
    }

    @{
        int i = 0;
    }
    @foreach (var c in nodeChildren)
    {
        <li style="list-style: none; display: flex">
            <span style="transform: translateX(-100%); font-size: 0.75rem;">@(i++)</span>
            @switch (c.ValueKind)
            {
                case JsonValueKind.String:
                {
                    <span class="string d-block">"@c"</span>
                    break;
                }

                case JsonValueKind.Number:
                {
                    <span class="number d-block">@c</span>
                    break;
                }

                case JsonValueKind.Object:
                {
                    <JsonTree Node="@c" />
                    break;
                }

                case JsonValueKind.Array:
                {
                    <div>
                        <span class="d-block">[</span>
                        <JsonTree Node="@c" />
                        <span class="d-block">]</span>
                    </div>
                    break;
                }
            }
        </li>
    }
</ul>

@code {
    private JsonElement node;
    private JsonProperty[] nodeProperties = Array.Empty<JsonProperty>();
    private JsonElement[] nodeChildren = Array.Empty<JsonElement>();

    [Parameter]
    public string Json { get; set; }

    [Parameter]
    public JsonElement? Node { get; set; }

    protected override void OnInitialized()
    {
        if (Node.HasValue)
        {
            node = Node.Value;
        }
        else if (!string.IsNullOrWhiteSpace(Json))
        {
            var doc = JsonDocument.Parse(Json);
            node = doc.RootElement;
        }
        else
        {
            throw new Exception("One of the available parameters is required: Json, Node");
        }

        if (node.ValueKind == JsonValueKind.Array)
        {
            nodeChildren = node.EnumerateArray().ToArray();
        }
        else if (node.ValueKind == JsonValueKind.Object)
        {
            nodeProperties = node.EnumerateObject().ToArray();
        }
    }
}